// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package main

import (
	"sync"
)

// Ensure, that UserFetcherMock does implement UserFetcher.
// If this is not the case, regenerate this file with moq.
var _ UserFetcher = &UserFetcherMock{}

// UserFetcherMock is a mock implementation of UserFetcher.
//
//	func TestSomethingThatUsesUserFetcher(t *testing.T) {
//
//		// make and configure a mocked UserFetcher
//		mockedUserFetcher := &UserFetcherMock{
//			GetFunc: func(name string) User {
//				panic("mock out the Get method")
//			},
//		}
//
//		// use mockedUserFetcher in code that requires UserFetcher
//		// and then make assertions.
//
//	}
type UserFetcherMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(name string) User

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Name is the name argument value.
			Name string
		}
	}
	lockGet sync.RWMutex
}

// Get calls GetFunc.
func (mock *UserFetcherMock) Get(name string) User {
	callInfo := struct {
		Name string
	}{
		Name: name,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	if mock.GetFunc == nil {
		var (
			userOut User
		)
		return userOut
	}
	return mock.GetFunc(name)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//
//	len(mockedUserFetcher.GetCalls())
func (mock *UserFetcherMock) GetCalls() []struct {
	Name string
} {
	var calls []struct {
		Name string
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// ResetGetCalls reset all the calls that were made to Get.
func (mock *UserFetcherMock) ResetGetCalls() {
	mock.lockGet.Lock()
	mock.calls.Get = nil
	mock.lockGet.Unlock()
}

// ResetCalls reset all the calls that were made to all mocked methods.
func (mock *UserFetcherMock) ResetCalls() {
	mock.lockGet.Lock()
	mock.calls.Get = nil
	mock.lockGet.Unlock()
}
