// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package main

import (
	"sync"
)

// Ensure, that EmailSenderMock does implement EmailSender.
// If this is not the case, regenerate this file with moq.
var _ EmailSender = &EmailSenderMock{}

// EmailSenderMock is a mock implementation of EmailSender.
//
//	func TestSomethingThatUsesEmailSender(t *testing.T) {
//
//		// make and configure a mocked EmailSender
//		mockedEmailSender := &EmailSenderMock{
//			SendFunc: func(to string, subject string, body string) error {
//				panic("mock out the Send method")
//			},
//		}
//
//		// use mockedEmailSender in code that requires EmailSender
//		// and then make assertions.
//
//	}
type EmailSenderMock struct {
	// SendFunc mocks the Send method.
	SendFunc func(to string, subject string, body string) error

	// calls tracks calls to the methods.
	calls struct {
		// Send holds details about calls to the Send method.
		Send []struct {
			// To is the to argument value.
			To string
			// Subject is the subject argument value.
			Subject string
			// Body is the body argument value.
			Body string
		}
	}
	lockSend sync.RWMutex
}

// Send calls SendFunc.
func (mock *EmailSenderMock) Send(to string, subject string, body string) error {
	callInfo := struct {
		To      string
		Subject string
		Body    string
	}{
		To:      to,
		Subject: subject,
		Body:    body,
	}
	mock.lockSend.Lock()
	mock.calls.Send = append(mock.calls.Send, callInfo)
	mock.lockSend.Unlock()
	if mock.SendFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.SendFunc(to, subject, body)
}

// SendCalls gets all the calls that were made to Send.
// Check the length with:
//
//	len(mockedEmailSender.SendCalls())
func (mock *EmailSenderMock) SendCalls() []struct {
	To      string
	Subject string
	Body    string
} {
	var calls []struct {
		To      string
		Subject string
		Body    string
	}
	mock.lockSend.RLock()
	calls = mock.calls.Send
	mock.lockSend.RUnlock()
	return calls
}

// ResetSendCalls reset all the calls that were made to Send.
func (mock *EmailSenderMock) ResetSendCalls() {
	mock.lockSend.Lock()
	mock.calls.Send = nil
	mock.lockSend.Unlock()
}

// ResetCalls reset all the calls that were made to all mocked methods.
func (mock *EmailSenderMock) ResetCalls() {
	mock.lockSend.Lock()
	mock.calls.Send = nil
	mock.lockSend.Unlock()
}
